import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

# Load the dataset
data = pd.read_csv('diabetes.csv')

# Split dataset into features and labels
X = data.iloc[:, 1:].values  # Features (columns 1 to end)
y = data.iloc[:, 0].values  # Labels (column 0)

# Normalize the features using min-max scaling
X = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))


# Perceptron class definition
class Perceptron:
    def __init__(self, learning_rate=0.01, n_epochs=50):
        self.learning_rate = learning_rate  # Learning rate for weight updates
        self.n_epochs = n_epochs  # Number of epochs to train

    def fit(self, X, y):
        # Initialize weights to zeros and bias to zero
        self.weights = np.zeros(X.shape[1])
        self.bias = 0
        self.errors = []  # Track number of misclassifications in each epoch

        # Training process
        for _ in range(self.n_epochs):
            error_count = 0  # Track errors in the current epoch
            for xi, target in zip(X, y):
                # Calculate the update value
                update = self.learning_rate * (target - self.predict(xi))
                # Update weights and bias
                self.weights += update * xi
                self.bias += update
                # Count misclassifications
                error_count += int(update != 0.0)
            self.errors.append(error_count)  # Append the number of errors

    def predict(self, X):
        # Calculate the linear combination of weights and inputs, add bias
        linear_output = np.dot(X, self.weights) + self.bias
        # Apply the step function to determine class label
        return np.where(linear_output >= 0, 1, -1)

    def accuracy(self, X, y):
        # Calculate the accuracy as the percentage of correctly classified samples
        predictions = self.predict(X)
        return np.mean(predictions == y) * 100


# Split the dataset into 80% training and 20% testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Perceptron model with a learning rate of 0.1 and 50 epochs
model = Perceptron(learning_rate=0.1, n_epochs=50)

# Train the model on the training data
model.fit(X_train, y_train)

# Evaluate the model on the test data
accuracy = model.accuracy(X_test, y_test)
print(f'Test Accuracy: {accuracy:.2f}%')

# Plot the number of errors during training across epochs
plt.plot(range(1, len(model.errors) + 1), model.errors, marker='o')
plt.xlabel('Epochs')
plt.ylabel('Number of Updates')
plt.title('Perceptron Training Progress')
plt.show()
